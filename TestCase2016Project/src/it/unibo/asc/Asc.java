/* Generated by AN DISI Unibo */ 
/*
This code is generated only ONCE
*/
package it.unibo.asc;
import java.awt.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Base64;

import javax.imageio.ImageIO;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.ActorContext;

public class Asc extends AbstractAsc { 
	public Asc(String actorId, ActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
		super(actorId, myCtx, outEnvView);
	}
	
	protected Label userMsg;
	protected Button alarm;
	protected MyPanel results;
	
	@Override
	protected void addCmdPanels(){
		//super.addCmdPanels();
		//photo panel
		((Frame) env).removeAll();
		GridLayout l = new GridLayout();
		l.setColumns(2);
		l.setRows(2);
		((Frame) env).setLayout(l);
		results = new MyPanel();
		results.setSize(300, 400);
		((Frame) env).add(results);
		alarm = new Button("Alarm");
		alarm.setBackground(Color.red);
		alarm.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
					execAction("Alarm");
			}
		});
		alarm.setEnabled(false);
		((Frame) env).add(alarm);
		userMsg = new Label("Waiting for results");
		((Frame) env).add(userMsg);
		((Frame) env).validate();
	}
	
	//this is called when the results are received
	public void loadResults(String image){
		results.setImage(image);
		alarm.setEnabled(true);
		userMsg.setText("Results received");
		((Frame) env).validate();
	}
	
	@Override
	public void execAction(String cmd) {
		super.execAction(cmd);
		if( cmd.equals("Alarm") ){
			platform.raiseEvent("input", "local_alarm", "local_alarm");
			userMsg.setText("Alarm sent!");
			return;
		}
	}
	
	protected class MyPanel extends Panel{
		 /**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		private Image image;
		 
		 public MyPanel(){
			 image = null;
		 }
		 
		 public void paint(Graphics g){
		        super.paint(g);
		        if(image != null){
		        	int w = getWidth();
			        int h = getHeight();
			        int imageWidth = image.getWidth(this);
			        int imageHeight = image.getHeight(this);
			        int x = (w - imageWidth)/2;
			        int y = (h - imageHeight)/2;
			        g.drawImage(image, x, y, this);
		        }
		    }
		 
		 public void setImage(String imageString){
		        byte[] imageBytes = Base64.getDecoder().decode(imageString.getBytes());
		        try {
					image = ImageIO.read(new ByteArrayInputStream(imageBytes));
				} catch (IOException e) {
					System.out.println("MyPanel: Image error!");
					e.printStackTrace();
				}
		        validate();
		 }
	}
	
}
