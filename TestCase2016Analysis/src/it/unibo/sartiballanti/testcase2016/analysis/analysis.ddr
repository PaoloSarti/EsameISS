RobotSystem testCase2016Analysis

Dispatch drive : drive(X)						 
Dispatch detectionResults : detectionResults(X)	 
Event alarm : alarm								
Event obstacle : obstacle(X)					
Event local_inputDrive : local_inputDrive(X)	//events from GUI/External Input
Event local_alarm : local_alarm					//events from GUI/External Input
  
Context ctxDriveRobot ip[host="localhost" port=8010]
Context ctxOperator ip[host="localhost" port=8015]
Context ctxASC ip[host="localhost" port=8020]

QActor operatorconsole context ctxOperator -g cyan
{
	Plan init normal
		println("Operator starts");
		switchToPlan senseInput
		
	Plan senseInput
		sense time(60000) local_inputDrive -> sendDriveCommands;
		repeatPlan 0
		
	Plan sendDriveCommands resumeLastPlan
		onEvent local_inputDrive : local_inputDrive(X) -> forward driverobot -m drive : drive(X)	
}

QActor ascconsole context ctxASC -g green
{
	Plan init normal
		println("ASC starts");
		switchToPlan work
		
	Plan work
		receiveMsg time(600000);
		onMsg detectionResults : detectionResults(X) -> println(detectionResults(X));
		switchToPlan senseAlarm
		
	Plan senseAlarm
		sense time(100000) local_alarm -> continue;
		onEvent local_alarm : local_alarm -> emit alarm : alarm
}

Robot mymock QActor driverobot context ctxDriveRobot 
{
	Plan init normal
		println("driverobot starts");
		switchToPlan drive
		
	Plan drive 
		//We'll have to make sure that the robot executes the commands from the first console only
		receiveMsg time(600000) react event obstacle -> detect;
		onMsg drive : drive(X) -> println(savingmove(X));
		onMsg drive : drive(X) -> println(driving(X));
		repeatPlan 0
		
	Plan detect
		println("Stopping...");
		delay time(1000);
		println("Start blinking the led");
		println("Starting detection Phase...");
		delay time(3000);
		println("Sending results");
		forward ascconsole -m detectionResults : detectionResults("results");
		println("Detection Results Sent");
		println("Stop blinking the led");
		println("Back to base");
		switchToPlan backToBase
		
	Plan backToBase
		delay time(20000) react event alarm -> alarmReaction;
		switchToPlan finish
		
	Plan alarmReaction resumeLastPlan
		println("Alarm!");
		println("Start blinking the led")
		
	Plan finish
		println("DriveRobot ends")
}


