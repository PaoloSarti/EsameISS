/* Generated by AN DISI Unibo */ 
/*
This code is generated only ONCE
*/
package it.unibo.operator;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import it.unibo.baseEnv.basicFrame.EnvFrame;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.ActorContext;

public class Operator extends AbstractOperator {
	
	protected Map<String, String> driveCmdMap;
	
	protected List<String> driveCmdsSorted;
	
	public final static String Forward="Forward";
	public final static String Backward="Backward";
	public final static String Right="Right";
	public final static String Left="left";
	public final static String Halt="Halt";
	
	public Operator(String actorId, ActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
		super(actorId, myCtx, outEnvView);		

	}
	
	protected void initCmdMap(){
		driveCmdMap=new HashMap<>();
		driveCmdMap.put(Forward, "executeInput(move(mf,100,0))");
		driveCmdMap.put(Backward, "executeInput(move(mb,100,0))");
		driveCmdMap.put(Right, "executeInput(move(mr,100,0))");
		driveCmdMap.put(Left, "executeInput(move(ml,100,0))");
		driveCmdMap.put(Halt, "executeInput(move(h,100,0))");
		driveCmdsSorted=new ArrayList<>();
		driveCmdsSorted.add(Forward);
		driveCmdsSorted.add(Backward);
		driveCmdsSorted.add(Left);
		driveCmdsSorted.add(Right);
		driveCmdsSorted.add(Halt);
	}
	
	@Override
	protected void addInputPanel(int size) {
	}
	
	@Override
	protected void addCmdPanels(){
		//super.addCmdPanels();
		initCmdMap();
		
		driveCmdsSorted.forEach(cmd->{
			((EnvFrame) env).addCmdPanel(cmd,  new String[]{cmd}, this);
		});
	}
	
	@Override
	public void execAction(String cmd) {
		super.execAction(cmd);
		
		if(driveCmdMap.containsKey(cmd)){
			String actualCmd = driveCmdMap.get(cmd);
			platform.raiseEvent("input", "local_inputDrive", "local_inputDrive("+actualCmd+")");
			return;
		}
	}
	
}