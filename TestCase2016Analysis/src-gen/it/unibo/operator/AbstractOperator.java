/* Generated by AN DISI Unibo */ 
package it.unibo.operator;
import alice.tuprolog.Term;
import alice.tuprolog.Struct;
import it.unibo.qactors.ActorContext;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.planned.QActorPlanned;
import it.unibo.qactors.action.ActionDummy;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;

public abstract class AbstractOperator extends QActorPlanned { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	
			protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
				return outEnvView;
			}
	
	
		public AbstractOperator(String actorId, ActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx, "./srcMore/it/unibo/operator/plans.txt", 
			"./srcMore/it/unibo/operator/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");		
	 	}
		@Override
		protected void doJob() throws Exception {
	 		initSensorSystem();
			boolean res = init();
			//println(getName() + " doJob " + res );
		} 
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/
	    public boolean init() throws Exception{	//public to allow reflection
	    try{
	    	curPlanInExec =  "init";
	    	boolean returnValue = suspendWork;
	    while(true){
	    nPlanIter++;
	    		temporaryStr = " \"Operator starts\" ";
	    		println( temporaryStr );  
	    		if( ! switchToPlan("sendCommands").getGoon() ) break;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	    println( getName() + " ERROR " + e.getMessage() );
	    throw e;
	    }
	    }
	    public boolean sendCommands() throws Exception{	//public to allow reflection
	    try{
	    	curPlanInExec =  "sendCommands";
	    	boolean returnValue = suspendWork;
	    while(true){
	    nPlanIter++;
	    		temporaryStr = " \"Waiting for commands\" ";
	    		println( temporaryStr );  
	    		//delay
	    		aar = delayReactive(3000,"" , "");
	    		if( aar.getInterrupted() ) curPlanInExec   = "sendCommands";
	    		if( ! aar.getGoon() ) break;
	    		temporaryStr = " \"Sending command\" ";
	    		println( temporaryStr );  
	    		temporaryStr = unifyMsgContent("drive(X)","drive( \"driveCmdPayLoad\" )", guardVars ).toString();
	    		sendMsg("drive","driverobot", ActorContext.dispatch, temporaryStr ); 
	    		temporaryStr = " \"Command sent\" ";
	    		println( temporaryStr );  
	    		//delay
	    		aar = delayReactive(2000,"" , "");
	    		if( aar.getInterrupted() ) curPlanInExec   = "sendCommands";
	    		if( ! aar.getGoon() ) break;
	    		if( repeatPlan(0).getGoon() ) continue;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	    println( getName() + " ERROR " + e.getMessage() );
	    throw e;
	    }
	    }
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	    
	 
		/* 
		* ------------------------------------------------------------
		* APPLICATION ACTIONS
		* ------------------------------------------------------------
		*/
		
	  }
	
