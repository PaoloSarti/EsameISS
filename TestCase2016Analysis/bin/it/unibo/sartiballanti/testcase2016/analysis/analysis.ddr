RobotSystem testCase2016Analysis

Dispatch drive : drive(X)						 
Dispatch detectionResults : detectionResults(X)	 
Event alarm : alarm								
Event obstacle : obstacle(X)					
  
Context ctxDriveRobot ip[host="192.168.1.69" port=8010]
Context ctxOperator ip[host="192.168.1.2" port=8015]
Context ctxASC ip[host="192.168.1.2" port=8020]

QActor operator context ctxOperator
{
	Plan init normal
		println("Operator starts");
		switchToPlan sendCommands
		
	Plan sendCommands
		println("Waiting for commands");
		delay time(3000);
		println("Sending command");
		forward driverobot -m drive : drive("driveCmdPayLoad");
		println("Command sent");
		delay time(2000);
		repeatPlan 0	
}

QActor asc context ctxASC
{
	Plan init normal
		println("ASC starts");
		switchToPlan waitForResults
		
	Plan waitForResults
		receiveMsg time(600000);
		onMsg detectionResults : detectionResults(X) -> println(detectionResults(X));
		onMsg detectionResults : detectionResults(X) -> switchToPlan riskDecision
		
	Plan riskDecision
		println("Evaluating risks");
		delay time(3000);
		//It could emit the alarm signal
		emit alarm : alarm		
}

Robot mock QActor driverobot context ctxDriveRobot 
{
	Plan init normal
		println("driverobot starts");
		switchToPlan drive
		
	Plan drive 
		receiveMsg time(600000) react event obstacle -> detect;
		onMsg drive : drive(X) -> println(savingmove(X));
		onMsg drive : drive(X) -> println(driving(X));
		repeatPlan 0
		
	Plan detect
		println("Stopping...");
		delay time(1000);
		println("Start blinking the led");
		println("Starting detection Phase...");
		delay time(3000);
		println("Sending results");
		forward asc -m detectionResults : detectionResults("results");
		println("Detection Results Sent");
		println("Stop blinking the led");
		println("Back to base");
		switchToPlan backToBase
		
	Plan backToBase
		delay time(20000) react event alarm -> alarmReaction;
		switchToPlan finish
		
	Plan alarmReaction resumeLastPlan
		println("Alarm!");
		println("Start blinking the led")
		
	Plan finish
		println("DriveRobot ends")
}


