RobotSystem testCase2016LogicArchitecture

/*
 * Interaction
 */

Event local_inputDrive : local_inputDrive(X)	//events from GUI/External Input
Dispatch drive : drive(X)						//Sent by the Operator 
Event bagFound : bagFound						//Emitted by the DriveRobot, it signals that the bag was found
Dispatch detectionResults : detectionResults(X)	//Sent by the robot to the ASC 
Event alarm : alarm
Event local_alarm : local_alarm					//events from GUI/External Input
Event obstacle : obstacle(X)					//local event from sensors
Event startBlink : startBlink
Event stopBlink : stopBlink


//Context ctxLocal ip[host="localhost" port=8005]
Context ctxDriveRobot ip[host="192.168.1.69" port=8010]
Context ctxOperator ip[host="192.168.1.2" port=8015]
Context ctxASC ip[host="192.168.1.2" port=8020]


QActor led context ctxDriveRobot {
	
	Plan init normal
		println("Led starts");
		switchToPlan senseStartBlink
		
	Plan senseStartBlink
		println("Led Off");
		sense time(60000) startBlink -> startBlinking;
		repeatPlan 0
		
	Plan startBlinking
		println("led On");
		delay time(1000) react event stopBlink -> senseAlarm;
		println("Led Off");
		delay time(1000) react event stopBlink -> senseAlarm;
		repeatPlan 0
		
	Plan senseAlarm
		println("Led Off");
		sense time(60000) alarm-> startBlinking;
		repeatPlan 0
}


QActor operator context ctxOperator -g cyan
{
	Plan init normal
		println("Operator starts");
		switchToPlan senseInput
		
	Plan senseInput
		sense time(60000) bagFound, local_inputDrive -> found, sendDriveCommands;
		repeatPlan 0
		
	Plan found 
		onEvent bagFound : bagFound -> println("Bag found")
		
	Plan sendDriveCommands
		onEvent local_inputDrive : local_inputDrive(X) -> forward driverobot -m drive : drive(X)	
}

QActor asc context ctxASC -g green
{
	Plan init normal
		println("ASC starts");
		switchToPlan work
		
	Plan work
		receiveMsg time(600000);
		onMsg detectionResults : detectionResults(X) -> println(detectionResults(X));
		switchToPlan senseAlarm
		
	Plan senseAlarm
		sense time(100000) local_alarm -> continue;
		onEvent local_alarm : local_alarm -> emit alarm : alarm
}

Robot mock QActor driverobot context ctxDriveRobot 
{
	Plan init normal
		println("driverobot starts");
		solve consult("talkTheory.pl") time(0) onFailSwitchTo prologFailure;
		switchToPlan drive
		
	Plan drive 
		receiveMsg time(600000) react event obstacle -> detect;
		onMsg drive : drive(X) -> println(savingmove(X));
		onMsg drive : drive(X) -> solve X time(0);
		repeatPlan 0
		
	Plan detect
		println("Stopping...");
		robotStop speed(100) time(1000);
		emit startBlink : startBlink;
		println("Starting detection Phase...");
		[?? detection(X) ] forward asc -m detectionResults : detectionResults(X);
		println("Detection Results Sent");
		emit stopBlink : stopBlink;
		println("Back to base");
		switchToPlan backToBase
		
	Plan backToBase
		solve backToBase time(0);	//It doesn't need to react, as the qactor led handles that
		switchToPlan finish
		
	Plan finish
		emit stopBlink : stopBlink;
		println("DriveRobot ends")
		
	Plan prologFailure resumeLastPlan
		println("Failed to load talkTheory")
}


